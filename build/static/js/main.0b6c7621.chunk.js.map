{"version":3,"sources":["services/anecdotes.js","reducers/anecdoteReducer.js","reducers/notificationReducer.js","components/AnecdoteList.js","components/Notification.js","components/AnecdoteForm.js","reducers/filterReducer.js","components/AnecdoteFilter.js","App.js","store.js","index.js"],"names":["baseUrl","getAll","a","console","log","axios","get","response","data","createNewAnecdote","content","anecdoteObject","votes","post","addNewVote","newAnecdoteObject","id","put","initialState","map","anecdote","Math","random","toFixed","anecdoteReducer","state","action","type","anecdoteToVote","find","n","votedAnecdote","sort","b","value","handleSetTimeOutId","createNewNotification","notification","howLong","dispatch","clearTimeout","setTimeout","notificationReducer","Anecdote","handleClick","onClick","AnecdoteList","useDispatch","addAnecdoteVote","anecdoteService","voteAnecdoteReduxThunk","filter","useSelector","toLocaleLowerCase","anecdotes","includes","ConnectedNotification","connect","props","style","border","padding","borderWidth","mapDispatchToProps","createAnecdote","newAnecdote","ConnectedAnecdoteForm","addNewAnecdote","event","preventDefault","target","onSubmit","name","filterReducer","filterAnecdotes","ConnectedFilter","marginBottom","onChange","howToFilter","App","useEffect","reducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0b6c7621.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\n//Määritellään baseUrl, joka lukee datan \"db.json\" filestä\r\n//Suhteellinen määritys kun ollaa yhdistetty forntend ja backend\r\n//Ja viedään Herokuun/Herokua varten\r\nconst baseUrl = '/anecdotes'\r\n\r\n//Tämä kun käytetään lokaalisti backend frontend yhdistelmää\r\n//const baseUrl = 'http://localhost:3001/anecdotes'\r\n//Funktio kaikkien anecdoottien hakemiseksi\r\nconst getAll = async () => {\r\n    console.log('TULEEKO GET AALIIN')\r\n    const response = await axios.get(baseUrl)\r\n    console.log('Responssi',response.data)\r\n    return response.data\r\n}\r\n\r\n//console.log('TULEEKO SERVICES/anecdotes.jsss')\r\n\r\n//Funktio uuden anecdootin luomiseksi\r\nconst createNewAnecdote = async (content) => {\r\n    //Anecdote objectille votes nolla, ei tarvitse ID:tä koska json server hoitaa sen\r\n    const anecdoteObject = { content, votes: 0 }\r\n    const response = await axios.post(baseUrl, anecdoteObject)\r\n    return response.data\r\n}\r\n\r\n\r\n//Funktio votettukselle\r\nconst addNewVote = async (newAnecdoteObject, id) => {\r\n    //Anecdote objectin päivitys, etsitään ensin id:n perusteella kannasta ja päivitetään\r\n    //uudella objectilla\r\n    const response = await axios.put(`${baseUrl}/${id}`, newAnecdoteObject)\r\n    return response.data\r\n}\r\n\r\nexport default { getAll, createNewAnecdote, addNewVote }","/* eslint-disable no-case-declarations */\r\n\r\n//Tämä import tarvitaan, kun haetaan data json serveriltä\r\nimport anecdoteService from '../services/anecdotes'\r\n/*\r\nconst anecdotesAtStart = [\r\n  'If it hurts, do it more often',\r\n  'Adding manpower to a late software project makes it later!',\r\n  'The first 90 percent of the code accounts for the first 90 percent of the development time...The remaining 10 percent of the code accounts for the other 90 percent of the development time.',\r\n  'Any fool can write code that a computer can understand. Good programmers write code that humans can understand.',\r\n  'Premature optimization is the root of all evil.',\r\n  'Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.'\r\n]\r\n*/\r\n\r\nconst anecdotesAtStart = []\r\n\r\nconst getId = () => (100000 * Math.random()).toFixed(0)\r\n\r\n//Tällä luodaan anecdootti olio, jossa id ja votet mukana\r\nconst asObject = (anecdote) => {\r\n  return {\r\n    content: anecdote,\r\n    id: getId(),\r\n    votes: 0\r\n  }\r\n}\r\n//Lisätään jokaisell anekdootille oma id ja votesit hyödybtäen asObject funktiota\r\nconst initialState = anecdotesAtStart.map(asObject)\r\n\r\nconst anecdoteReducer = (state = initialState, action) => {\r\n\r\n  switch (action.type) {\r\n\r\n    case 'VOTE':\r\n      //id tulee alla olevasta \"voteAnecdote\" funktiosta\r\n      const id = action.data.id\r\n      //Etsitään anecdote id:n perusteella jota votetaan\r\n      const anecdoteToVote = state.find(n => n.id === id)\r\n      //Lisätään vote anecdotelle\r\n      const votedAnecdote = {\r\n        ...anecdoteToVote,\r\n        votes: anecdoteToVote.votes + 1\r\n      }\r\n      //Palautetaan uusi taulukon tila\r\n      //Palautetaan kaikki muut anecdotet sellaisenaan paitsi äänestetty uudella arvolla\r\n      //Lopuksi sortataan äänien mukaan\r\n      return state.map(anecdote =>\r\n        anecdote.id !== id\r\n          ? anecdote\r\n          : votedAnecdote).sort((a, b) => a.votes <= b.votes ? 1 : -1)\r\n    //Luodaan uusi Anecdote\r\n    case 'NEW_ANECDOTE':\r\n      console.log('TULEEKO UUSI ANECDOTE', action.data)\r\n      return [...state, action.data]\r\n    //Luodaan noteiden alustus, joka tulee alla olevasta actionista\r\n    //\"initializeAnecdotes\" ja aktivoidaan actioni \"store.js\" filestä\r\n    case 'INIT_ANECDOTES':\r\n      return action.data.sort((a, b) => a.votes <= b.votes ? 1 : -1)\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n\r\n\r\n//----------------NÄMÄ TOTEUTETTU REDUX THUNKILLA ALKAA----------------------------------\r\n//Tällä annetaan reducerille ID ja type, jolla määrätään mitä tehdään\r\n//Action on javascript objekti jolla on type -field.\r\n//Kun päivitetään objecti tietokantaan, niin annetaan uusi objecti ja ID\r\n//ja ajetaan \"src/services/anecdotes.js\" filessä put -komento, joka löytää\r\n//anecdoten ID:n perusteella ja korvaa vanhan objectin uudella\r\n//Anecdote ja id saadaan \"src/Components/AnecdoteList.js\" filestä ja \r\n//\"const AnecdoteList = () => {\" funktiosta\r\nexport const voteAnecdoteReduxThunk = (anecdote, id) => {\r\n  console.log('TULIKO VOTEEN')\r\n  return async dispatch => {\r\n    //Viedään \"src/services/anecdotes.js\" filessä put -komennolle sekä\r\n    //uusi anecdote obejkti, että vanhan/korvattavan objectin id\r\n    await anecdoteService.addNewVote({\r\n      content: anecdote.content,\r\n      votes: anecdote.votes + 1\r\n    }, anecdote.id)\r\n    dispatch({\r\n      type: 'VOTE',\r\n      data: { id }\r\n    })\r\n  }\r\n}\r\n\r\n//Redux-thunk: Tällä Luodaan uusi anecdote ja importataan esim. \"App.js\" fileen, josta\r\n//tänne tuodaan anecdoten contentti\r\n//Action on javascript objekti jolla on type -field.\r\nexport const createAnecdote = content => {\r\n  console.log('TULIKO CREATW ANECDOTEEN', content)\r\n  return async dispatch => {\r\n    const newAnecdote = await anecdoteService.createNewAnecdote(content)\r\n    dispatch({\r\n      type: 'NEW_ANECDOTE',\r\n      data: newAnecdote,\r\n    })\r\n  }\r\n}\r\n\r\n//Redux-Thunk:lla tehtäessä sisemmässä funktiossaan, eli asynkronisessa actionissa operaatio hakee \r\n//ensin palvelimelta kaikki muistiinpanot ja sen jälkeen dispatchaa muistiinpanot \r\n//storeen lisäävän actionin.\r\nexport const initializeAnecdotes = () => {\r\n  return async dispatch => {\r\n    const anecdotes = await anecdoteService.getAll()\r\n    dispatch({\r\n      type: 'INIT_ANECDOTES',\r\n      data: anecdotes,\r\n    })\r\n  }\r\n}\r\n//----------------NÄMÄ TOTEUTETTU REDUX THUNKILLA LOPPUU----------------------------------\r\n\r\nexport default anecdoteReducer","\r\n//Annetaan initial arvo notification objectille\r\nconst initialState = { value: 'Mukavaa päivää' }\r\n\r\n\r\nconst notificationReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n\r\n        //case 'VOTE_ANECDOTE_NOTE':\r\n        //console.log('TULEEKO NOTIFICATIONIIN case VOTE', action.data)\r\n        //return { ...state, value: 'ANECDOTE VOTED: ' + action.data.content }\r\n        //Luodaan uusi Anecdote\r\n        //case 'NEW_ANECDOTE_NOTE':\r\n        //console.log('TULEEKO NOTIFICATIONIIN case NEW_ANECDOTE_NOTE', action.data)\r\n        //return { ...state, value: 'NEW ANECDOTE ADDED: ' + action.data.content }\r\n\r\n        //----NÄIN KUN LUODAAN AWAIT/ASYNC:llä ALKAA----------------------------------------------\r\n        case 'NEW_NOTIFICATION':\r\n            //Notificaation sisältö tulee alla olevast actionista ja action saa taas sisällönsä\r\n            //\"src/components/AnecdoteForm.js\" filestä\r\n            console.log('TULEEKO NOTIFICATIONIIN case NEW_ANECDOTE_NOTE', action.data)\r\n            return { ...state, value: action.data.notification }\r\n        //Poistetaan notificaatio 5sec jälkeen\r\n        case 'REMOVE_NOTE':\r\n            return { ...state, value: null }\r\n\r\n        //----NÄIN KUN LUODAAN AWAIT/ASYNC:llä LOPPUU----------------------------------------------\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n\r\n//------------ASYNC/AWAITILLA NOTIFICATION ALKAA-------------\r\n//Lisätään ns. globaali muuttuja, jolla voidaan pitää yllä edellisen vote-nappulan\r\n//painalluksen setTimeoutin ID:tä\r\nlet handleSetTimeOutId = null\r\nexport const createNewNotification = (notification, howLong) => {\r\n    console.log('createNewNotification', notification)\r\n    return async dispatch => {\r\n        console.log('TIMEOUT ID:n ARVO', handleSetTimeOutId)\r\n        await dispatch({\r\n            type: 'NEW_NOTIFICATION',\r\n            data: { notification }\r\n        })\r\n        //Ehtolause timeOutin clearaamiseen, kun painetaan useasti vote nappia \r\n        if (handleSetTimeOutId !== null) {\r\n            console.log('KÄVIKÖ IFFISSÄ')\r\n            clearTimeout(handleSetTimeOutId)\r\n            handleSetTimeOutId = null\r\n        }\r\n        //Otetaan uusimman painalluksen timeout ID:n arvo talteen\r\n        handleSetTimeOutId = setTimeout(() => {\r\n            dispatch({ type: 'REMOVE_NOTE' })\r\n        }, howLong * 1000)\r\n        console.log('TIMEOUT ID:n ARVO', handleSetTimeOutId)\r\n    }\r\n}\r\n\r\n//------------ASYNC/AWAITILLA NOTIFICATION LOPPUU-------------\r\n\r\nexport default notificationReducer\r\n","import React from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { voteAnecdoteReduxThunk } from '../reducers/anecdoteReducer'\r\n// eslint-disable-next-line no-unused-vars\r\nimport { createNewNotification, voteNotification, removeNotification } from '../reducers/notificationReducer'\r\n\r\n//Eristetään omaan komponenttiin yksittäisen Anecdootin näyttäminen sekä vote nappi\r\nconst Anecdote = ({ anecdote, handleClick }) => {\r\n    return (\r\n        <div>\r\n            <div>\r\n                {anecdote.content}\r\n            </div>\r\n            <div>\r\n                has {anecdote.votes}\r\n                <button onClick={handleClick}>vote</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n//Anekdoottien listaus eristetty omaan moduuliin\r\nconst AnecdoteList = () => {\r\n    const dispatch = useDispatch()\r\n    //Luodaan funktio vote napille, joka lisää yhden äänen ja antaa notificaation\r\n    //sekä tyhjää notificaation 5sec jälkeen\r\n    const addAnecdoteVote = (anecdote) => {\r\n        //console.log('AECDOTE VOTEING ID', anecdote.id)\r\n        //dispatch(voteAnecdote(anecdote.id))\r\n\r\n        //Näin voten lisäys kun käytetään redux thunkia\r\n        //Annetaan anecdote kokonaisuudessaan ja id \"anecdoteReducerille\"\r\n        dispatch(voteAnecdoteReduxThunk(anecdote, anecdote.id))\r\n\r\n        //------------NOTIFICATION AWAIT/ASYNC:lla----------------------------\r\n        dispatch(createNewNotification(`YOU VOTED: '${anecdote.content}'`, 10))\r\n\r\n        //------------NOTIFICATION AWAIT/ASYNC:lla----------------------------\r\n        /*\r\n        dispatch(voteNotification(anecdote.content))\r\n        //Viiden sekunnin päästä poistetaan notificaatio\r\n        setTimeout(() => {\r\n            dispatch(removeNotification())\r\n        }, 5000)\r\n        */\r\n    }\r\n    //Näytetään kaikki jos ei ole \"filter\" kenttään kirjoittetu mitään\r\n    //Otetaan filterin arvo talteen (voidaan myös laittaa suoraan if-lauseeseen) \"state.filter.value\"\r\n    //ja tällöin ei tarvita tätä apumuuttujaa. HUOM! muutetaan vielä arvo lower caseksi, niin ei ole case\r\n    //sensitive\r\n    const filter = useSelector(state => state.filter.value.toLocaleLowerCase())\r\n    const anecdotes = useSelector(state => {\r\n        if (filter === '') {\r\n            return state.anecdotes\r\n        }\r\n        //Filteröidään pois ne anecdootit, jotka eivät sisällä filter kentän arvoa\r\n        //HUOM! muutetaan lower caseksi anecdootit ettei ole case sensitive\r\n        return state.anecdotes.filter(anecdote => anecdote.content.toLocaleLowerCase().includes(filter))\r\n    })\r\n\r\n    //console.log('FILETERIN ARVO', filter)\r\n    //console.log('ANECDOTESIT', anecdotes)\r\n    return (\r\n        anecdotes.map(anecdote =>\r\n            <Anecdote\r\n                key={anecdote.id}\r\n                anecdote={anecdote}\r\n                handleClick={() => addAnecdoteVote(anecdote)} />\r\n        ))\r\n}\r\n\r\nexport { AnecdoteList }\r\n/*\r\n//Tämä default export ei toiminut--> toimii jos ei importata hakasuluilla \"{}\"\r\nexport default AnecdoteList\r\n*/","/* eslint-disable no-unused-vars */\r\n\r\nimport React from 'react'\r\nimport { useSelector } from 'react-redux'\r\n//Connect importataan käyttöön\r\nimport { connect } from 'react-redux'\r\n\r\n\r\n\r\n//------------TÄSSÄ KÄYTETÄÄN CONNECTIA ALKAA-------------------------------\r\nconst Notification = (props) => {\r\n\r\n  //const notification = useSelector(state => state.notification)\r\n\r\n  const style = {\r\n    border: 'solid',\r\n    padding: 10,\r\n    borderWidth: 1\r\n  }\r\n  //Ks. notificationReducder.js filestä \r\n  //const initialState = { value: 'INITIAL NOTIFICATION' }\r\n  //siksi alla tarvitaan \"notification.value\"\r\n  //console.log('MIKÄ ARVO NOTIFICAATIOLLA ', props.notification.value)\r\n  //Jos on luotu uusi anecdote, notificaation tilan arvo ei ole null\r\n  //ja viestin sisältö määräytyy \"AnecdoteForm.js\" ja \"notificationReducder.js\"\r\n  //fileistä\r\n  if (props.notification.value !== null) {\r\n    return (\r\n      <div style={style}>\r\n        {props.notification.value}\r\n      </div>\r\n    )\r\n  }\r\n  //Jos ei ole lisätty uutta anecdotea tai votetettu tai 5sec kulunut\r\n  //notificaation näyttämisestä, niin ei renderöidä mitään eli arvo on null\r\n  //tai muutettu ohjelmallisesti null:ksi\r\n  else if (props.notification.value === null) {\r\n    return null\r\n  }\r\n}\r\n\r\n//Tällä funktiolla välitetään komponentille tila/state propseina\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    notification: state.notification,\r\n\r\n  }\r\n}\r\n\r\n//Moduuli eksporttaa nyt alkuperäisen komponentin sijaan \r\n//yhdistetyn komponentin.\r\n//Tällä saadaan välitettyä Notification komponentille \"mapStateToProps\" -funktio\r\nconst ConnectedNotification = connect(mapStateToProps)(Notification)\r\nexport default ConnectedNotification\r\n\r\n//------------TÄSSÄ KÄYTETÄÄN CONNECTIA LOPPUU-------------------------------","\r\nimport React from 'react'\r\n//Tämä iport tarvitaan connect funktion käyttöön\r\nimport { connect } from 'react-redux'\r\n//import { useDispatch } from 'react-redux'\r\nimport { createAnecdote } from '../reducers/anecdoteReducer'\r\n// eslint-disable-next-line no-unused-vars\r\nimport { createNewNotification, removeNotification } from '../reducers/notificationReducer'\r\n// eslint-disable-next-line no-unused-vars\r\nimport anecdoteService from '../services/anecdotes'\r\n\r\n\r\n//---------TÄLLAINEN KOMPONENTTI, KUN KÄYTETÄÄN connect FUNKTIOTA ALKAA-----------------------\r\n//Uuden Anekdootin eristmäinen omaan komponenttiin ja exportattu muiden komponenttien/failien\r\n//käyttöön\r\nconst AnecdoteForm = (props) => {\r\n\r\n    //Muutetaan async/await, koska talletetaan uusi anecdote json serverille\r\n    const addNewAnecdote = async (event) => {\r\n        event.preventDefault()\r\n\r\n        const content = event.target.newAnecdote.value\r\n        event.target.newAnecdote.value = ''\r\n        //Kun käytetään connect funktiota, \"createAnecdote\" ja \"createNewNotification\"\r\n        //on välitetty propseina\r\n        props.createAnecdote(content)\r\n        console.log('UUSI ANEKDOOTTI', content)\r\n        props.createNewNotification(`YOU CREATED: '${content}'`, 10)\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={addNewAnecdote}>\r\n                <div><input id='newAnecdoteId' name=\"newAnecdote\" /></div>\r\n                <button id='submit-buttonId' type=\"submit\">create</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n//Tässä mahdollistetaan importattu \"createAnecdote\" reducer välittäminen propseina\r\n//AnecdoteForm -komponentille\r\nconst mapDispatchToProps = {\r\n    createAnecdote,\r\n    createNewNotification,\r\n}\r\n//Tällä välitetään \"mapDispatchToProps\" propsina AnecdoteForm-komponentille\r\n//HUOM! Default arvo null, muuten ei toimi renderöinti\r\nconst ConnectedAnecdoteForm = connect(null, mapDispatchToProps)(AnecdoteForm)\r\nexport default ConnectedAnecdoteForm\r\n\r\n//------------------TÄLLAINEN KOMPONENTTI, KUN KÄYTETÄÄN connect FUNKTIOTA LOPPUU-----------------------\r\n\r\n\r\n","//Annetaan initial arvo notification objectille\r\nconst initialState = { value: '' }\r\n\r\n//Filterin tilankäsittelijä eli reducer\r\n\r\n//HUOM! tätä reduceria ajetaan \"src/components/AnecdoteFilter.js\" komponentista\r\n//ja tilaa hyödynnetään \"AnecdoteList.js\" komponentissa filteröimään pois ne\r\n//anecdootit, jotka eivät sisällä kenttään syötettyjä merkkejä\r\n\r\n//HUOM! Muista lisätä reduceri \"store.js\" fileen!\r\n\r\n//HUOM! \"filter\" kenttää pitää lisätä renderöitymään \"App.js\" filestä. \r\n//Kentän määritys \"src/components/AnecdoteFilter.js\"-komponentissa\r\nconst filterReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case 'FILTER_ANECDOTES_ALIGN_WITH_INPUT':\r\n            //console.log('TULEEKO NOTIFICATIONIIN case VOTE', action.data)\r\n            return { ...state, value: action.data.content }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n//Tällä actionilla annetaan käsky palauttaa \"NEW_ANECDOTE_NOTE\" tila \r\n//Action on javascript objekti jolla on type -field.\r\nexport const filterAnecdotes = (content) => {\r\n    return {\r\n        type: 'FILTER_ANECDOTES_ALIGN_WITH_INPUT',\r\n        data: { content }\r\n    }\r\n}\r\n\r\nexport default filterReducer","import React from 'react'\r\n//Tämä iport tarvitaan connect funktion käyttöön\r\nimport { connect } from 'react-redux'\r\nimport { filterAnecdotes } from '../reducers/filterReducer'\r\n\r\n\r\n//-------------TÄSSÄ KÄYTETÄÄN connect FUNKTIOTA dispatch HOOKIEN SIJAAN ALKAA----------------\r\n//Otetaan input kentän sisältö talteen eventtinä ja muutetaan filterin tilaa \r\n//sitä mukaa kun kenttä täyttyy\r\n//props:t kun käytetään connect funktiota, muuten ei\r\nconst Filter = (props) => {\r\n   \r\n    const handleChange = (event) => {\r\n        //Estää mm. browserin uudelleen latautumisen\r\n        event.preventDefault()\r\n        //Otetaan inpute kenttää syötetty arvo talteen\r\n        const howToFilter = event.target.value\r\n\r\n        //------------TÄMÄ KUN KÄYTETÄÄN connect FUNKTIOTA ALKAA-------------------\r\n        props.filterAnecdotes(howToFilter)\r\n        //------------TÄMÄ KUN KÄYTETÄÄN connect FUNKTIOTA LOPPUU-------------------\r\n\r\n       \r\n    }\r\n    const style = {\r\n        marginBottom: 10\r\n    }\r\n\r\n    return (\r\n        <div style={style}>\r\n            filter <input onChange={handleChange} />\r\n        </div>\r\n    )\r\n}\r\n\r\n//Tässä mahdollistetaan importattu \"filterAnecdotes\" reducer välittäminen propseina\r\n//Filter -komponentille\r\nconst mapDispatchToProps = {\r\n    filterAnecdotes,\r\n}\r\n//Tällä välitetään \"mapDispatchToProps\" propsina Filter-komponentille\r\n//HUOM! Default arvo null, muuten ei toimi renderöinti\r\nconst ConnectedFilter = connect(null, mapDispatchToProps)(Filter)\r\nexport default ConnectedFilter\r\n\r\n//-------------TÄSSÄ KÄYTETÄÄN connect FUNKTIOTA dispatch HOOKIEN SIJAAN ALKAA----------------","import React, { useEffect } from 'react'\r\n//Vote funktio on \"anecdoteReducer.js\" filessä\r\n//import { voteAnecdote } from './reducers/anecdoteReducer'\r\n//import { useSelector, useDispatch } from 'react-redux'\r\n//import { AnecdoteForm } from './components/AnecdoteForm'\r\nimport { AnecdoteList } from './components/AnecdoteList'\r\n//import { Notification } from './components/Notification'\r\n//import { Filter } from '../frontend/client/components/AnecdoteFilter'\r\n\r\n//-----NÄMÄ KUN KÄYTETÄÄN useSelector ja useDispatch HOOKIEIDEN SIJAAN connect FUNKTIOITA ALKAA------\r\nimport ConnectedNotification from './components/Notification'\r\nimport ConnectedAnecdoteForm from './components/AnecdoteForm'\r\nimport ConnectedFilter from './components/AnecdoteFilter'\r\n//-----NÄMÄ KUN KÄYTETÄÄN useSelector ja useDispatch HOOKIEIDEN SIJAAN connect FUNKTIOITA LOPPUU-----\r\n\r\n\r\n//------------NÄMÄ TARVITAAN INITIAL TILAN LUOMISEKSI/db.json FILESTÄ DATAN HAKEMISEKSI ALKAA--------\r\n//import anecdoteService from './services/anecdotes'\r\nimport { initializeAnecdotes } from './reducers/anecdoteReducer'\r\nimport { useDispatch } from 'react-redux'\r\n//------------NÄMÄ TARVITAAN INITIAL TILAN LUOMISEKSI/db.json FILESTÄ DATAN HAKEMISEKSI LOPPUU--------\r\n\r\n\r\n\r\nconst App = () => {\r\n\r\n  const dispatch = useDispatch()\r\n  console.log('Tuleeko APP.js')\r\n  useEffect(() => {\r\n    dispatch(initializeAnecdotes())\r\n    //Jos ei lisätä hakasulkeiden sisään \"dispatch\" tulee eslint herja\r\n    //toimisi ilman \"dispatch\" tekstiä myös vaikka herja jäisikin\r\n  }, [dispatch])\r\n\r\n\r\n  //----KUN KÄYTETÄÄN CONNECTEDIA useSelector JA useDispatch HOOKIEN SIJAAN ALKAA--------\r\n  return (\r\n    <div>\r\n      <ConnectedNotification />\r\n      <h2>Filter anecdote</h2>\r\n      <ConnectedFilter />\r\n      <br></br>\r\n      <h2>Anecdotes</h2>\r\n      <AnecdoteList />\r\n      <h2>create new</h2>\r\n      <ConnectedAnecdoteForm />\r\n    </div>\r\n  )\r\n}\r\n//----KUN KÄYTETÄÄN CONNECTEDIA useSelector JA useDispatch HOOKIEN SIJAAN LOPPUU--------\r\n\r\nexport default App","import { createStore, combineReducers, applyMiddleware } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport thunk from 'redux-thunk'\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nimport anecdoteReducer, { initializeAnecdotes } from './reducers/anecdoteReducer'\r\nimport notificationReducer from './reducers/notificationReducer'\r\nimport filterReducer from './reducers/filterReducer'\r\n\r\n//import anecdoteService from './services/anecdotes'\r\n\r\n//Luodaan combineReducer, jotta voidaan käyttää useamppaa reduceria\r\nconst reducer = combineReducers({\r\n  anecdotes: anecdoteReducer,\r\n  notification: notificationReducer,\r\n  filter: filterReducer\r\n})\r\n\r\nconst store = createStore(\r\n  reducer,\r\n  composeWithDevTools(applyMiddleware(thunk))\r\n)\r\n\r\n\r\nexport default store","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\n//import { createStore } from 'redux'\r\nimport { Provider } from 'react-redux'\r\nimport App from './App'\r\nimport store from './store'\r\n\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n)"],"sourceRoot":""}